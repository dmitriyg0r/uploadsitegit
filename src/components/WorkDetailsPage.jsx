import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Link, useParams, useNavigate } from 'react-router-dom';

function WorkDetailsPage() {
  const { authorName } = useParams();
  const navigate = useNavigate();
  const [workData, setWorkData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [downloadingFiles, setDownloadingFiles] = useState(new Set());
  const [filesInfo, setFilesInfo] = useState({});

  const API_URL = import.meta.env.VITE_API_URL || '';

  useEffect(() => {
    fetchWorkDetails();
  }, [authorName]);

  const fetchWorkDetails = async () => {
    try {
      setLoading(true);
      const response = await axios.get(`${API_URL}/api/uploads`);
      const uploads = Array.isArray(response.data) ? response.data : [];
      
      // –ù–∞—Ö–æ–¥–∏–º —Ä–∞–±–æ—Ç—É –ø–æ –∏–º–µ–Ω–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–≤—Ç–æ—Ä–∞
      const work = uploads.find(upload => upload.fullName === decodeURIComponent(authorName));
      
      if (!work) {
        setError('–†–∞–±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
      }
      
      setWorkData(work);
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö
      const fileInfoPromises = Object.entries(work.files).map(async ([type, fileName]) => {
        try {
          const response = await axios.get(
            `${API_URL}/api/file-info/${encodeURIComponent(work.fullName)}/${encodeURIComponent(fileName)}`
          );
          return { [type]: response.data };
        } catch (error) {
          return { [type]: { size: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', error: true } };
        }
      });
      
      const fileInfoResults = await Promise.all(fileInfoPromises);
      const filesInfoObj = fileInfoResults.reduce((acc, curr) => ({ ...acc, ...curr }), {});
      setFilesInfo(filesInfoObj);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç—ã:', error);
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç—ã');
    } finally {
      setLoading(false);
    }
  };

  const downloadFile = async (fileName, fileType) => {
    const fileKey = `${fileName}`;
    setDownloadingFiles(prev => new Set(prev).add(fileKey));
    
    try {
      const response = await axios.get(
        `${API_URL}/api/download/${encodeURIComponent(workData.fullName)}/${encodeURIComponent(fileName)}`,
        { responseType: 'blob' }
      );
      
      const url = window.URL.createObjectURL(new Blob([response.data]));
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', fileName);
      document.body.appendChild(link);
      link.click();
      link.remove();
      window.URL.revokeObjectURL(url);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞');
    } finally {
      setDownloadingFiles(prev => {
        const newSet = new Set(prev);
        newSet.delete(fileKey);
        return newSet;
      });
    }
  };

  const formatFileSize = (bytes) => {
    if (bytes === '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' || bytes === undefined) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    if (bytes === 0) return '0 –ë–∞–π—Ç';
    
    const k = 1024;
    const sizes = ['–ë–∞–π—Ç', '–ö–ë', '–ú–ë', '–ì–ë'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  const getFileIcon = (fileName) => {
    const extension = fileName.split('.').pop().toLowerCase();
    switch (extension) {
      case 'exe':
        return '‚öôÔ∏è';
      case 'docx':
        return 'üìù';
      case 'pdf':
        return 'üìÑ';
      case 'zip':
        return 'üì¶';
      default:
        return 'üìé';
    }
  };

  const getAuthorsDisplay = (work) => {
    if (work.authors && work.authors.length > 0) {
      return work.authors;
    } else if (work.secondAuthor) {
      return [work.fullName, work.secondAuthor];
    }
    return [work.fullName];
  };

  const getWorkTitle = (work) => {
    return work.title || `–†–∞–±–æ—Ç–∞ –æ—Ç ${work.fullName}`;
  };

  const copyToClipboard = (text) => {
    navigator.clipboard.writeText(text);
    alert('–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
  };

  if (loading) {
    return (
      <div className="work-details-page">
        <div className="loading">
          <div className="spinner"></div>
          <p>–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã...</p>
        </div>
      </div>
    );
  }

  if (error || !workData) {
    return (
      <div className="work-details-page">
        <div className="error-container">
          <h1>‚ùå {error || '–†–∞–±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}</h1>
          <p>–í–æ–∑–º–æ–∂–Ω–æ, —Ä–∞–±–æ—Ç–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–ª–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞</p>
          <Link to="/" className="back-to-home-btn">
            ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —Ä–∞–±–æ—Ç
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="work-details-page">
      <header className="work-header">
        <div className="breadcrumb">
          <Link to="/" className="breadcrumb-link">–ü—Ä–æ–µ–∫—Ç—ã</Link>
          <span className="breadcrumb-separator">/</span>
          <span className="breadcrumb-current">{getWorkTitle(workData)}</span>
        </div>
        
        <div className="work-title-section">
          <div className="work-icon">üöÄ</div>
          <div className="work-info">
            <h1 className="work-title">{getWorkTitle(workData)}</h1>
            <div className="work-meta">
              <span className="work-visibility">üåê –ü—É–±–ª–∏—á–Ω–∞—è</span>
              <span className="work-group">üë• {workData.group}</span>
              {workData.subject && (
                <span className="work-subject">üìö {workData.subject}</span>
              )}
            </div>
          </div>
        </div>
      </header>

      <div className="work-content">
        <div className="work-main">
          <div className="work-nav">
            <div className="nav-tabs">
              <button className="nav-tab active">üìÅ –§–∞–π–ª—ã</button>
              <button className="nav-tab" disabled>üìù README</button>
            </div>
            <div className="nav-actions">
              <button 
                className="action-button download-all"
                onClick={() => {
                  Object.entries(workData.files).forEach(([type, fileName]) => {
                    downloadFile(fileName, type);
                  });
                }}
              >
                ‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –≤—Å–µ
              </button>
            </div>
          </div>

          <div className="files-container">
            <div className="files-header">
              <div className="files-info">
                <span className="commit-info">
                  üìÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {new Date(workData.timestamp).toLocaleDateString('ru-RU', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                  })}
                </span>
              </div>
              <div className="files-count">
                {Object.keys(workData.files).filter(key => key !== 'programType').length} —Ñ–∞–π–ª–æ–≤
              </div>
            </div>

            <div className="files-list">
              {Object.entries(workData.files)
                .filter(([type]) => type !== 'programType') // –ò—Å–∫–ª—é—á–∞–µ–º —Å–ª—É–∂–µ–±–Ω–æ–µ –ø–æ–ª–µ
                .map(([type, fileName]) => {
                const fileInfo = filesInfo[type] || {};
                const isDownloading = downloadingFiles.has(fileName);
                
                return (
                  <div key={type} className="file-item">
                    <div className="file-icon-name">
                      <span className="file-icon">{getFileIcon(fileName)}</span>
                      <span className="file-name">{fileName}</span>
                    </div>
                    <div className="file-actions">
                      <span className="file-size">{formatFileSize(fileInfo.size)}</span>
                      <button
                        className="file-download-btn"
                        onClick={() => downloadFile(fileName, type)}
                        disabled={isDownloading}
                        title="–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª"
                      >
                        {isDownloading ? (
                          <span className="spinner-small"></span>
                        ) : (
                          '‚¨áÔ∏è'
                        )}
                      </button>
                    </div>
                  </div>
                );
              })}
            </div>
          </div>

          <div className="readme-section">
            <div className="readme-header">
              <h3>üìã –û –ø—Ä–æ–µ–∫—Ç–µ</h3>
            </div>
            <div className="readme-content">
              <p>–î–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –≤ —Ä–∞–º–∫–∞—Ö —É—á–µ–±–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞.</p>
              
              <h4>üì¶ –°–æ—Å—Ç–∞–≤ –ø—Ä–æ–µ–∫—Ç–∞:</h4>
              <ul>
                {(workData.files.program || workData.files.exe) && (
                  <li>
                    <strong>–ü—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π —Ñ–∞–π–ª:</strong> {workData.files.program || workData.files.exe}
                    {workData.files.programType === '.py' && (
                      <span className="file-type-hint"> (Python —Å–∫—Ä–∏–ø—Ç)</span>
                    )}
                    {workData.files.programType === '.exe' && (
                      <span className="file-type-hint"> (–ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª)</span>
                    )}
                  </li>
                )}
                {workData.files.docx && (
                  <li><strong>–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:</strong> {workData.files.docx}</li>
                )}
              </ul>

              {workData.subject && (
                <>
                  <h4>üéì –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞:</h4>
                  <p>{workData.subject}</p>
                </>
              )}
            </div>
          </div>
        </div>

        <div className="work-sidebar">
          <div className="sidebar-section">
            <h3>üë• –ê–≤—Ç–æ—Ä—ã</h3>
            <div className="authors-list">
              {getAuthorsDisplay(workData).map((author, index) => (
                <div key={index} className="author-item">
                  <div className="author-avatar">üë§</div>
                  <div className="author-info">
                    <div className="author-name">{author}</div>
                    <div className="author-role">
                      {index === 0 ? '–û—Å–Ω–æ–≤–Ω–æ–π –∞–≤—Ç–æ—Ä' : '–°–æ–∞–≤—Ç–æ—Ä'}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          <div className="sidebar-section">
            <h3>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
            <div className="stats-list">
              <div className="stat-item">
                <span className="stat-label">–§–∞–π–ª–æ–≤:</span>
                <span className="stat-value">{Object.keys(workData.files).length}</span>
              </div>
              <div className="stat-item">
                <span className="stat-label">–ì—Ä—É–ø–ø–∞:</span>
                <span className="stat-value">{workData.group}</span>
              </div>
              <div className="stat-item">
                <span className="stat-label">–ó–∞–≥—Ä—É–∂–µ–Ω–æ:</span>
                <span className="stat-value">
                  {new Date(workData.timestamp).toLocaleDateString('ru-RU')}
                </span>
              </div>
            </div>
          </div>

          <div className="sidebar-section">
            <h3>üîó –î–µ–π—Å—Ç–≤–∏—è</h3>
            <div className="actions-list">
              <button 
                className="action-btn"
                onClick={() => {
                  const authors = getAuthorsDisplay(workData);
                  const shareText = `–†–∞–±–æ—Ç–∞: "${getWorkTitle(workData)}" –æ—Ç ${authors.join(', ')}`;
                  copyToClipboard(shareText);
                }}
              >
                üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
              </button>
              <button 
                className="action-btn"
                onClick={() => {
                  const url = window.location.href;
                  copyToClipboard(url);
                }}
              >
                üîó –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default WorkDetailsPage; 