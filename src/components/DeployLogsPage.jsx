import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Link } from 'react-router-dom';

const DeployLogsPage = () => {
  const [logs, setLogs] = useState([]);
  const [uploads, setUploads] = useState([]);
  const [stats, setStats] = useState(null);
  const [loading, setLoading] = useState(true);
  const [deploying, setDeploying] = useState(false);
  const [error, setError] = useState(null);
  const [autoRefresh, setAutoRefresh] = useState(true);
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [password, setPassword] = useState('');
  const [activeTab, setActiveTab] = useState('logs');
  const [deletingItems, setDeletingItems] = useState(new Set());

  const API_URL = import.meta.env.VITE_API_URL || '';
  
  // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
  const adminPassword = 'admin123';

  const handleAuth = (e) => {
    e.preventDefault();
    if (password === adminPassword) {
      setIsAuthenticated(true);
      sessionStorage.setItem('adminAuth', 'true');
      setError(null);
    } else {
      setError('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
    }
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    const savedAuth = sessionStorage.getItem('adminAuth');
    if (savedAuth === 'true') {
      setIsAuthenticated(true);
    }
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤
  const fetchLogs = async () => {
    try {
      const response = await axios.get(`${API_URL}/api/deploy-logs/latest`);
      setLogs(response.data.logs || []);
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤: ' + err.message);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Ä–∞–±–æ—Ç
  const fetchUploads = async () => {
    try {
      const response = await axios.get(`${API_URL}/api/uploads`);
      setUploads(Array.isArray(response.data) ? response.data : []);
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–±–æ—Ç: ' + err.message);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const fetchStats = async () => {
    try {
      const response = await axios.get(`${API_URL}/api/admin/stats`);
      setStats(response.data);
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ' + err.message);
    }
  };

  // –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  const fetchData = async () => {
    setLoading(true);
    try {
      await Promise.all([
        fetchLogs(),
        fetchUploads(),
        fetchStats()
      ]);
    } finally {
      setLoading(false);
    }
  };

  // –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
  const handleManualDeploy = async () => {
    if (deploying) return;
    
    setDeploying(true);
    try {
      await axios.post(`${API_URL}/api/deploy`);
      setTimeout(fetchLogs, 1000); // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥–∏ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è: ' + err.message);
    } finally {
      setDeploying(false);
    }
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
  const handleDeleteUpload = async (fullName) => {
    if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å—Ç—É–¥–µ–Ω—Ç–∞ "${fullName}"? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`)) {
      return;
    }

    setDeletingItems(prev => new Set(prev).add(fullName));
    
    try {
      await axios.delete(`${API_URL}/api/admin/uploads/${encodeURIComponent(fullName)}`);
      await fetchUploads(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
      await fetchStats(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    } catch (err) {
      setError(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã: ${err.response?.data?.error || err.message}`);
    } finally {
      setDeletingItems(prev => {
        const newSet = new Set(prev);
        newSet.delete(fullName);
        return newSet;
      });
    }
  };

  // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  useEffect(() => {
    if (isAuthenticated) {
      fetchData();
      
      let interval;
      if (autoRefresh && activeTab === 'logs') {
        interval = setInterval(fetchLogs, 3000);
      }
      
      return () => {
        if (interval) clearInterval(interval);
      };
    }
  }, [autoRefresh, isAuthenticated, activeTab]);

  const formatFileSize = (bytes) => {
    if (bytes === 0) return '0 –ë–∞–π—Ç';
    const k = 1024;
    const sizes = ['–ë–∞–π—Ç', '–ö–ë', '–ú–ë', '–ì–ë'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  const formatLogLine = (line) => {
    const parts = line.match(/\[(.*?)\] \[(.*?)\] (.*)/);
    if (parts) {
      const [, timestamp, level, message] = parts;
      const time = new Date(timestamp).toLocaleTimeString();
      const levelClass = level === 'ERROR' ? 'error' : level === 'INFO' ? 'info' : 'default';
      
      return (
        <div key={`${timestamp}-${Math.random()}`} className={`log-line ${levelClass}`}>
          <span className="log-time">{time}</span>
          <span className={`log-level ${levelClass}`}>{level}</span>
          <span className="log-message">{message}</span>
        </div>
      );
    }
    
    return (
      <div key={`${line}-${Math.random()}`} className="log-line">
        <span className="log-message">{line}</span>
      </div>
    );
  };

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –∞–≤—Ç–æ—Ä–∞–º–∏ –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
  const getAuthorsDisplayForAdmin = (upload) => {
    if (upload.authors && upload.authors.length > 0) {
      return upload.authors;
    } else if (upload.secondAuthor) {
      // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
      return [upload.fullName, upload.secondAuthor];
    }
    return [upload.fullName];
  };

  // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∏–ª–∏ fallback –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
  const getWorkTitleForAdmin = (upload) => {
    return upload.title || `–†–∞–±–æ—Ç–∞ –æ—Ç ${upload.fullName}`;
  };

  // –ï—Å–ª–∏ –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞
  if (!isAuthenticated) {
    return (
      <div className="admin-page">
        <div className="login-container">
          <div className="login-header">
            <h1>üîê –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å</h1>
            <p>–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</p>
          </div>
          
          <form onSubmit={handleAuth} className="login-form">
            <div className="form-group">
              <label htmlFor="password">–ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</label>
              <input
                type="password"
                id="password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                required
              />
            </div>
            
            {error && (
              <div className="error-message">
                ‚ùå {error}
              </div>
            )}
            
            <button type="submit" className="login-button">
              üöÄ –í–æ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
            </button>
          </form>
          
          <div className="back-link">
            <Link to="/">‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é</Link>
          </div>
        </div>
      </div>
    );
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
  return (
    <div className="admin-page">
      <header className="admin-header">
        <div className="admin-header-content">
          <h1>‚öôÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å</h1>
          <div className="admin-actions">
            <Link to="/" className="back-link">‚Üê –ù–∞ –≥–ª–∞–≤–Ω—É—é</Link>
            <button 
              onClick={() => {
                setIsAuthenticated(false);
                sessionStorage.removeItem('adminAuth');
              }}
              className="logout-button"
            >
              üö™ –í—ã–π—Ç–∏
            </button>
          </div>
        </div>
      </header>

      <div className="admin-tabs">
        <button 
          className={`tab-button ${activeTab === 'stats' ? 'active' : ''}`}
          onClick={() => setActiveTab('stats')}
        >
          üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        </button>
        <button 
          className={`tab-button ${activeTab === 'uploads' ? 'active' : ''}`}
          onClick={() => setActiveTab('uploads')}
        >
          üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–º–∏
        </button>
        <button 
          className={`tab-button ${activeTab === 'logs' ? 'active' : ''}`}
          onClick={() => setActiveTab('logs')}
        >
          üìã –õ–æ–≥–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
        </button>
      </div>

      <div className="admin-content">
        {/* –í–∫–ª–∞–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ */}
        {activeTab === 'stats' && (
          <div className="stats-section">
            <div className="section-header">
              <h2>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
              <button onClick={fetchStats} className="refresh-button">
                ‚Üª –û–±–Ω–æ–≤–∏—Ç—å
              </button>
            </div>
            
            {stats && (
              <div className="stats-grid">
                <div className="stat-card">
                  <div className="stat-value">{stats.totalUploads}</div>
                  <div className="stat-label">–í—Å–µ–≥–æ —Ä–∞–±–æ—Ç</div>
                </div>
                <div className="stat-card">
                  <div className="stat-value">{formatFileSize(stats.totalSize)}</div>
                  <div className="stat-label">–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä</div>
                </div>
                <div className="stat-card">
                  <div className="stat-value">{Object.keys(stats.uploadsByDate).length}</div>
                  <div className="stat-label">–î–Ω–µ–π —Å –∑–∞–≥—Ä—É–∑–∫–∞–º–∏</div>
                </div>
                <div className="stat-card">
                  <div className="stat-value">{stats.recentUploads.length}</div>
                  <div className="stat-label">–ù–µ–¥–∞–≤–Ω–∏—Ö –∑–∞–≥—Ä—É–∑–æ–∫</div>
                </div>
              </div>
            )}
            
            {stats?.recentUploads && stats.recentUploads.length > 0 && (
              <div className="recent-uploads">
                <h3>üïí –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
                <div className="recent-uploads-list">
                  {stats.recentUploads.map((upload, index) => (
                    <div key={index} className="recent-upload-item">
                      <div className="upload-info">
                        <span className="student-name">{upload.fullName}</span>
                        {upload.group && <span className="group-badge">{upload.group}</span>}
                      </div>
                      <span className="upload-time">
                        {new Date(upload.timestamp).toLocaleString('ru-RU')}
                      </span>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        )}

        {/* –í–∫–ª–∞–¥–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–º–∏ */}
        {activeTab === 'uploads' && (
          <div className="uploads-section">
            <div className="section-header">
              <h2>üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–º–∏ ({uploads.length})</h2>
              <button onClick={fetchUploads} className="refresh-button">
                ‚Üª –û–±–Ω–æ–≤–∏—Ç—å
              </button>
            </div>
            
            {loading ? (
              <div className="loading">
                <div className="spinner"></div>
                <p>–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...</p>
              </div>
            ) : uploads.length === 0 ? (
              <div className="no-uploads">
                <p>–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç –ø–æ–∫–∞ –Ω–µ—Ç</p>
              </div>
            ) : (
              <div className="uploads-table">
                <div className="table-header">
                  <div className="col-student">–ù–∞–∑–≤–∞–Ω–∏–µ / –°—Ç—É–¥–µ–Ω—Ç</div>
                  <div className="col-group">–ì—Ä—É–ø–ø–∞</div>
                  <div className="col-subject">–ü—Ä–µ–¥–º–µ—Ç</div>
                  <div className="col-date">–î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏</div>
                  <div className="col-files">–§–∞–π–ª—ã</div>
                  <div className="col-actions">–î–µ–π—Å—Ç–≤–∏—è</div>
                </div>
                
                {uploads.map((upload, index) => (
                  <div key={index} className="table-row">
                    <div className="col-student">
                      <Link 
                        to={`/work/${encodeURIComponent(upload.fullName)}`} 
                        className="work-title-admin-link"
                      >
                        <strong>{getWorkTitleForAdmin(upload)}</strong>
                      </Link>
                      <div className="authors-admin-list" style={{ fontSize: '12px', color: '#8b949e', marginTop: '4px' }}>
                        üë§ {getAuthorsDisplayForAdmin(upload).map((author, index) => (
                          <div key={index} style={{ marginLeft: '16px' }}>{author}</div>
                        ))}
                      </div>
                      {(upload.authors && upload.authors.length > 1) || upload.secondAuthor ? (
                        <div style={{ fontSize: '11px', color: '#58a6ff', marginTop: '2px' }}>
                          üë• –°–æ–≤–º–µ—Å—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞ ({upload.authors ? upload.authors.length : 2} –∞–≤—Ç–æ—Ä–∞)
                        </div>
                      ) : null}
                    </div>
                    <div className="col-group">
                      {upload.group || '‚Äî'}
                    </div>
                    <div className="col-subject">
                      {upload.subject || '‚Äî'}
                    </div>
                    <div className="col-date">
                      {new Date(upload.timestamp).toLocaleString('ru-RU')}
                    </div>
                    <div className="col-files">
                      {Object.keys(upload.files).length} —Ñ–∞–π–ª–æ–≤
                    </div>
                    <div className="col-actions">
                      <button
                        onClick={() => handleDeleteUpload(upload.fullName)}
                        disabled={deletingItems.has(upload.fullName)}
                        className="delete-button"
                        title="–£–¥–∞–ª–∏—Ç—å —Ä–∞–±–æ—Ç—É"
                      >
                        {deletingItems.has(upload.fullName) ? (
                          <>
                            <span className="spinner-small"></span>
                          </>
                        ) : (
                          'üóëÔ∏è'
                        )}
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        )}

        {/* –í–∫–ª–∞–¥–∫–∞ –ª–æ–≥–æ–≤ */}
        {activeTab === 'logs' && (
          <div className="logs-section">
            <div className="section-header">
              <h2>üìã –õ–æ–≥–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è</h2>
              <div className="logs-controls">
                <label className="auto-refresh-toggle">
                  <input
                    type="checkbox"
                    checked={autoRefresh}
                    onChange={(e) => setAutoRefresh(e.target.checked)}
                  />
                  –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                </label>
                <button onClick={fetchLogs} className="refresh-button">
                  ‚Üª –û–±–Ω–æ–≤–∏—Ç—å
                </button>
                <button 
                  onClick={handleManualDeploy} 
                  disabled={deploying}
                  className="deploy-button"
                >
                  {deploying ? '‚è≥ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ...' : 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ'}
                </button>
              </div>
            </div>
            
            <div className="logs-container">
              {loading ? (
                <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤...</div>
              ) : logs.length === 0 ? (
                <div className="no-logs">–õ–æ–≥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</div>
              ) : (
                <div className="logs-content">
                  {logs.map((line, index) => formatLogLine(line))}
                </div>
              )}
            </div>
          </div>
        )}
      </div>

      {error && (
        <div className="error-toast">
          <span>‚ùå {error}</span>
          <button onClick={() => setError(null)}>‚úï</button>
        </div>
      )}
    </div>
  );
};

export default DeployLogsPage; 