const fs = require('fs');
const path = require('path');

const uploadsDir = './uploads';

function cleanupDuplicates() {
  try {
    if (!fs.existsSync(uploadsDir)) {
      console.log('–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è uploads –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    const studentDirs = fs.readdirSync(uploadsDir);
    let fixedCount = 0;

    studentDirs.forEach(studentDir => {
      const metaPath = path.join(uploadsDir, studentDir, 'upload_info.json');
      
      if (fs.existsSync(metaPath)) {
        const uploadInfo = JSON.parse(fs.readFileSync(metaPath, 'utf8'));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª–µ exe
        if (uploadInfo.files && uploadInfo.files.exe && uploadInfo.files.program) {
          console.log(`–ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ä–∞–±–æ—Ç–µ: ${studentDir}`);
          
          // –£–¥–∞–ª—è–µ–º –ø–æ–ª–µ exe, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ program
          delete uploadInfo.files.exe;
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
          fs.writeFileSync(metaPath, JSON.stringify(uploadInfo, null, 2), 'utf8');
          fixedCount++;
          
          console.log(`–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —É–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª–µ exe`);
        }
      }
    });

    console.log(`\n–û—Ç—á–µ—Ç –æ –æ—á–∏—Å—Ç–∫–µ:`);
    console.log(`–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ä–∞–±–æ—Ç: ${studentDirs.length}`);
    console.log(`–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–π: ${fixedCount}`);
    
    if (fixedCount === 0) {
      console.log('‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
    } else {
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${fixedCount} —Ä–∞–±–æ—Ç`);
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É
console.log('üöÄ –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...\n');
cleanupDuplicates(); 